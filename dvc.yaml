stages:
  # First stage
  data_ingestion:
    # Command to run the stage
    cmd: python src/cnnClassifier/pipeline/stage_01_data_ingestion.py
    # Dependencies for executing the stage
    deps:
      - src/cnnClassifier/pipeline/stage_01_data_ingestion.py
      - config/config.yaml
    # The things generated from this stage would be at
    outs:
      - artifacts/data_ingestion/Chicken-fecal-images



  prepare_base_model:
    # command to execute
    cmd: python src/cnnClassifier/pipeline/stage_02_prepare_base_model.py
    # dependencies to execute the stage
    deps:
      - src/cnnClassifier/pipeline/stage_02_prepare_base_model.py
      - config/config.yaml
    # Parameters used to execute 
    params:
      - IMAGE_SIZE
      - INCLUDE_TOP
      - CLASSES
      - WEIGHTS
      - LEARNING_RATE
    # Output of the execution
    outs:
      - artifacts/prepare_base_model



  training:
    cmd: python src/cnnClassifier/pipeline/stage_03_training.py
    deps:
      - src/cnnClassifier/pipeline/stage_03_training.py
      - src/cnnClassifier/components/prepare_callbacks.py
      - config/config.yaml
      - artifacts/data_ingestion/Chicken-fecal-images
      - artifacts/prepare_base_model
    params:
      - IMAGE_SIZE
      - EPOCHS
      - BATCH_SIZE
      - AUGMENTATION
    outs:
      - artifacts/training/model.h5

  

  evaluation:
    cmd: python src/cnnClassifier/pipeline/stage_04_evaluation.py
    deps:
      - src/cnnClassifier/pipeline/stage_04_evaluation.py
      - config/config.yaml
      - artifacts/data_ingestion/Chicken-fecal-images
      - artifacts/training/model.h5
    params:
      - IMAGE_SIZE
      - BATCH_SIZE
    # It will generate metrics
    metrics:
    - scores.json:
        cache: false